func _ready():
    baseBTOrig = body_a.global_transform.basis.inverse() * body_b.global_transform.basis

func _physics_process(delta):
    apply_rot_spring_quat(delta)


func calc_target_orientation(Abasis:Basis):

        #node B's actual initial Transform that follows node A around in             
        current global space
	var baseBTOActual = Abasis*baseBTOrig

	var qx = Quat(Abasis.x,rest_angle_x*PI/180.0)
	var qy = Quat(Abasis.y,rest_angle_y*PI/180.0)
	var qz = Quat(Abasis.z,rest_angle_z*PI/180.0)
	
	var qBTargRo = qz*qy*qx# Quaternion node B Target Rotation
	var BTargetBasis = Basis()
	BTargetBasis.x =  qBTargRo*baseBTOActual.x
	BTargetBasis.y =  qBTargRo*baseBTOActual.y
	BTargetBasis.z =  qBTargRo*baseBTOActual.z

	return Quat(BTargetBasis)
	

"""
Thanks to:
	DMGregory: https://gamedev.stackexchange.com/questions/182850/rotate-rigidbody-to-face-away-from-camera-with-addtorque/182873#182873
	and
	The Step Event: https://youtu.be/vewwP8Od_7s
	For the calculations
"""

func apply_rot_spring_quat(delta):# apply spring rotation using quaternion
	if Engine.editor_hint:
		return

	var bAV = Vector3()# Node B Angular Velocity
	var aAV = Vector3()# Node A Angular Velocity
	var bI    # Node B inverse inertia tensor
	var aI    # Node A inverse inertia tensor

	if body_b.is_class("RigidBody"):
		bAV = body_b.angular_velocity
		bI = body_b.get_inverse_inertia_tensor()
	else:
		bAV = Vector3(0.0,0.0,0.0)

	if body_a.is_class("RigidBody"):
		aAV = body_a.angular_velocity
		aI = body_a.get_inverse_inertia_tensor()
	else:
		aAV = Vector3(0.0,0.0,0.0)
		
        #Quaternion Node B Transform Basis
	var qBT = Quat(body_b.global_transform.basis)

	#Quaternion Target Orientation
	var qTargetO = calc_target_orientation(body_a.global_transform.basis) 

	var rotChange = qTargetO * qBT.inverse() #rotation change quaternion
	
	var angle = 2.0 * acos(rotChange.w) 
    
	#if node B's quat is already facing the same way as qTargetO the axis shoots to infinity
	#this is my sorry ass attempt to protect the code from it
	if(is_nan(angle)):
		
		if body_b.is_class("RigidBody"):
			body_b.add_torque(-bAV)
		if body_a.is_class("RigidBody"):
			body_a.add_torque(-aAV)
		return

        # rotation change quaternion's "V" component
	var v = Vector3(rotChange.x,rotChange.y,rotChange.z)        

	var axis = v / sin(angle*0.5)# the quats axis

	if(angle>PI):
		angle -= 2.0*PI

	#as node B's quat faces the same way as qTargetO the angle nears 0
	#this slows it down to stop the axis from reaching infinity
	if(is_equal_approx(angle,0.0)):
		if body_b.is_class("RigidBody"):
			body_b.add_torque(-bAV)
		if body_a.is_class("RigidBody"):
			body_a.add_torque(-aAV)
		return

	var targetAngVel = axis*angle/delta
			
	var tb_consolidated = (stiffnessB)*(bI*targetAngVel) - dampingB*(bAV)
	var ta_consolidated = -(stiffnessA)*(aI*targetAngVel) - dampingA*(aAV)

	
	if body_b.is_class("RigidBody") and body_b != null:
		body_b.add_torque(tb_consolidated)

	if body_a.is_class("RigidBody") and body_a != null:
		body_a.add_torque(ta_consolidated)
